{ 
    "$schema": "http://json-schema.org/schema#",
    "$id": "https://raw.githubusercontent.com/keton/etrv2mqtt/master/etrv2mqtt/schemas/config.schema.json",
    "type":"object",
    "required": ["thermostats"],
    "properties": {
        "thermostats": {
            "type": "array",
            "items": {"$ref": "#/definitions/thermostat"},
            "description": "List of controlled thermostats"
        },
        "mqtt": {
            "type":"object",
            "description": "MQTT Server settings",
            "default": {},
            "properties": {
                "server": {
                    "type":"string",
                    "description": "MQTT server name",
                    "default": "localhost"
                },
                "port": {
                    "type":"integer",
                    "description": "MQTT server port",
                    "minimum": 1,
                    "maximum": 65534,
                    "default": 1883
                },
                "user": {
                    "type":"string",
                    "description": "user name required to connect"
                },
                "password": {
                    "type":"string",
                    "description": "password required to connect"
                },
                "base_topic": {
                    "type":"string",
                    "description": "base MQTT topic for all thermostats",
                    "default": "etrv"
                },
                "autodiscovery": {
                    "type": "boolean",
                    "description": "Enable MQTT autodiscovery for Homeassistant and OpenHab",
                    "default": true
                },
                "autodiscovery_topic": {
                    "type": "string",
                    "description": "Base autodiscovery topic name",
                    "default": "homeassistant"
                },
                "autodiscovery_retain": {
                    "type":"boolean",
                    "default": true,
                    "description": "Set retain bit on autodiscovery related messages"
                },
                "device_data_retain": {
                    "type":"boolean",
                    "default": false,
                    "description": "Set retain bit on device data messages"
                },
                "hass_birth_topic": {
                    "type": "string",
                    "default": "hass/status",
                    "description": "Home assistant birth message (program started) topic"
                },
                "hass_birth_payload": {
                    "type": "string",
                    "default": "online",
                    "description": "Home assistant birth message (program started) payload"
                }
            }
        },
        "options": {
            "type": "object",
            "default": {},
            "description": "Options common for all thermostats",
            "properties": {
                "poll_schedule": {
                    "type": "string",
                    "description": "Polling schedule to use (regular interval, every hour at specified minute)",
                    "enum": [ "interval", "hour_minute" ],
                    "default": "interval"
                },
                "poll_interval": {
                    "type":"integer",
                    "description": "Interval between thermostat data readouts in seconds (only used when poll_schedule is interval)",
                    "minimum": 1,
                    "default": 3600
                },
                "poll_hour_minute": {
                    "type": "integer",
                    "description": "The minute of the hour polling starts (only used when poll_schedule is hour_minute",
                    "minimum": 0,
                    "maximum": 59,
                    "default": 0
                },
                "retry_limit": {
                    "type":"integer",
                    "description": "Limit of BLE connect attempts",
                    "minimum": 0,
                    "default": 5
                },
                "retry_rerun": {
                    "type": "boolean",
                    "description": "Retry failed thermostats once again after the end of the queue",
                    "default": true
                },
                "stay_connected": {
                    "type": "boolean",
                    "description": "Set to true in order to leave BLE connection running after polling thermostat data or setting temperature. May drain battery.",
                    "default": false
                },
                "idle_block_ble": {
                    "type": "boolean",
                    "description": "Disable Bluetooth when idle (requires sudo permissions for rfkill) - EXPERIMENTAL, avoid battery draining",
                    "default": false
                },
                "report_room_temperature": {
                    "type": "boolean",
                    "description": "Set to false to disable reporting current room temperature as a separate Home Assistant sensor in MQTT auto discovery",
                    "default": true
                },
                "setpoint_debounce_time": {
                    "type": "integer",
                    "description": "Delay in seconds between getting setpoint value over MQTT and applying it to the thermostat. Used for debouncing Home Assistant climate control behaviour.",
                    "default": 3,
                    "minimum": 1
                }
            }
        }
    },
    "definitions": {
        "thermostat": {
            "type":"object",
            "required": ["topic", "address", "secret_key"],
            "properties": {
                "topic": {
                    "type": "string",
                    "description": "MQTT topic name to control this thermostat",
                    "minLength":1
                },
                "address": {
                    "type":"string",
                    "description": "BLE MAC address of the thermostat in 00:00:00:00:00:00 format",
                    "minLength":17,
                    "maxLength": 17
                },
                "secret_key": {
                    "type":"string",
                    "description": "Secret pairing key of the thermostat as hex string, 16 bytes, 32 hex chars",
                    "minLength":32,
                    "maxLength": 32
                }
            }
        }
    }
}
